name: AWS Infra with Terraform
on:
    push:
        branches:
            - "deploytoaws"                                             # When code is deployed to the specific branch

env:
    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    TF_STATE_BUCKET_NAME: ${{ secrets.AWS_TF_STATE_BUCKET_NAME }}
    PRIVATE_SSH_KEY: ${{ secrets.AWS_SSH_KEY_PRIVATE }}
    PUBLIC_SSH_KEY: ${{ secrets.AWS_SSH_KEY_PUBLIC }}
    AWS_REGION: ap-south-1

jobs:
    deploy-infra:
        runs-on: ubuntu-latest
        outputs:
          SERVER_PUBLIC_IP: ${{ steps.set-ip.outputs.instance_public_ip }}
        steps:
            - name: Checkout
              uses: actions/checkout@v2
            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v1
              with:
                terraform_wrapper: false
            - name: Terraform Init
              id: init
              run: terraform init -backend-config="bucket=$TF_STATE_BUCKET_NAME" -backend-config="region=ap-south-1"
              working-directory: ./terraform
            - name: Terraform Plan
              id: plan
              run:  |-
                terraform plan \
                -var="region=ap-south-1" \
                -var="public_key=$PUBLIC_SSH_KEY" \
                -var="private_key=$PRIVATE_SSH_KEY" \
                -var="key_name=deploykey" \
                -out=PLAN
              working-directory: ./terraform
            - name: Terraform Apply
              id: apply
              run: terraform apply PLAN
              working-directory: ./terraform
            - name: set output
              id: set-ip
              run: |-
                echo "::set-output name=instance_public_ip::$(terraform output instance_public_ip)"

    deploy-app:
      runs-on: ubuntu-latest
      needs: deploy-infra
      steps:
        - name: Checkout current branch
          uses: actions/checkout@v2

        - name: Setup SSH Key
          run: |
            mkdir -p ~/.ssh
            echo "${{ secrets.AWS_SSH_KEY_PRIVATE }}" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            ssh-keyscan ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
        - name: Create .env file dynamically 
          env:
            EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          run: |
            echo "EC2_USERNAME=${EC2_USERNAME}" >> env
              
    
        - name: Copy files to remote server
          env:
            EC2_HOST: ${{ secrets.EC2_HOST }}
            EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          run: |
            scp -r * $EC2_USERNAME@$EC2_HOST:/home/ubuntu/
            
    
        - name: Run Bash Script To Delpoy App
          env:
            EC2_HOST: ${{ secrets.EC2_HOST }}
            EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          run: |
            ssh -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST "chmod +x ./deploy.sh && ./deploy.sh"
    
        - name: Clean up SSH key 
          if: always()
          run: rm -f ~/.ssh/id_rsa

    deploy-prometheus:
      runs-on: ubuntu-latest
      needs: deploy-app
      steps:
        - name: Checkout current branch
          uses: actions/checkout@v2

        - name: Setup SSH Key
          run: |
            mkdir -p ~/.ssh
            echo "${{ secrets.AWS_SSH_KEY_PRIVATE }}" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            ssh-keyscan ${{ secrets.EC2_HOST_PROM }} >> ~/.ssh/known_hosts
        - name: Create .env file dynamically 
          env:
            EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          run: |
            echo "EC2_USERNAME=${EC2_USERNAME}" >> env
              
    
        - name: Copy files to remote server
          env:
            EC2_HOST: ${{ secrets.EC2_HOST_PROM }}
            EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          run: |
            scp -r * $EC2_USERNAME@$EC2_HOST:/home/ubuntu/
            
    
        - name: Run Bash Script To Delpoy Prometheus and Grafana
          env:
            EC2_HOST: ${{ secrets.EC2_HOST_PROM }}
            EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          run: |
            ssh -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST "chmod +x ./deployprom.sh && ./deployprom.sh"
            ssh -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST "chmod +x ./deploygrafana.sh && ./deploygrafana.sh"

    
        - name: Clean up SSH key 
          if: always()
          run: rm -f ~/.ssh/id_rsa

    deploy-nodexporter:
      runs-on: ubuntu-latest
      needs: deploy-app
      steps:
        - name: Checkout current branch
          uses: actions/checkout@v2

        - name: Setup SSH Key
          run: |
            mkdir -p ~/.ssh
            echo "${{ secrets.AWS_SSH_KEY_PRIVATE }}" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            ssh-keyscan ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
        - name: Create .env file dynamically 
          env:
            EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          run: |
            echo "EC2_USERNAME=${EC2_USERNAME}" >> env
              
    
        - name: Copy files to remote server
          env:
            EC2_HOST: ${{ secrets.EC2_HOST }}
            EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          run: |
            scp -r * $EC2_USERNAME@$EC2_HOST:/home/ubuntu/
            
    
        - name: Run Bash Script To Delpoy Node Exporter
          env:
            EC2_HOST: ${{ secrets.EC2_HOST }}
            EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          run: |
            ssh -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST "chmod +x ./deploynodexporter.sh && ./deploynodexporter.sh"
    
        - name: Clean up SSH key 
          if: always()
          run: rm -f ~/.ssh/id_rsa

          